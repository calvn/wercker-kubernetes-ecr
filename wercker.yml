build:
  box: google/golang
  steps:

  # Test the project
  - script:
      name: go test
      code: go test ./...

  # Statically build the project
  - script:
      name: go build
      code: CGO_ENABLED=0 go build -a -ldflags '-s' -installsuffix cgo -o app .

  # Create cities-controller.json for initialization
  - script:
      name: create cities-deployment.yml
      code: ./create_cities-deployment.yml.sh

  # Copy binary and templates to location that gets passed along to the next pipeline
  - script:
      name: copy files to next pipeline
      code: cp app *.yml $WERCKER_OUTPUT_DIR

push-ecr:
  box: google/golang
  steps:
  # use the scratch step to build a container from scratch based on the files present
  - internal/docker-scratch-push:
      aws-access-key: $AWS_ACCESS_KEY_ID
      aws-secret-key: $AWS_SECRET_ACCESS_KEY
      aws-registry-id: $AWS_REGISTRY_ID
      aws-region: us-east-1
      repository: cities
      entrypoint: ./app
      tag: $WERCKER_GIT_COMMIT
      ports: "5000"

  # Copy templates to location that gets passed along to the next pipeline
  - script:
      name: copy files to next pipeline
      code: cp *.yml $WERCKER_OUTPUT_DIR

deploy:
  box: google/golang
  steps:
  - kubectl:
      server: $KUBERNETES_MASTER
      token: $KUBERNETES_TOKEN     # Alternatively KUBERNETES_USERNAME and KUBERNETES_PASSWORD can be used
      insecure-skip-tls-verify: true
      command: apply -f cities-deployment.yml

  - kubectl:
      server: $KUBERNETES_MASTER
      token: $KUBERNETES_TOKEN     # Alternatively KUBERNETES_USERNAME and KUBERNETES_PASSWORD can be used
      insecure-skip-tls-verify: true
      command: apply -f cities-service.yml

rolling-update:
  box: google/golang
  steps:
    - kubectl:
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN     # Alternatively KUBERNETES_USERNAME and KUBERNETES_PASSWORD can be used
        insecure-skip-tls-verify: true
        command: rolling-update cities cities-deployment.yml
